include "show_log.pixi"

ArSize = 8;
num = 0;

// init the board
for (i = 0; i < ArSize; i = i + 1) {
    for (j = 0; j < ArSize; j = j + 1) {
        a[i, j] = 0;
    }
}

solve(0);
logf("Eight Queens problem has %d solutions!\n", num);
show_log();

// back tracking
fn solve($row) {
    for ($column = 0; $column < ArSize; $column = $column + 1) {
        a[$row, $column] = 1;
        if (check($row, $column)) {
            if ($row + 1 == ArSize) {
                outPut();
            } else {
                solve($row + 1);
            }
        }
        a[$row, $column] = 0;
    }
}

// check if a queen is valid for 3 directions
fn check($row, $column) {
    if ($row == 0) {
        ret(1);
    }
    
    // vertical column
    for (i = 0; i < $row; i = i + 1) {
        if (a[i, $column] == 1) {
            ret(0);
        }
    }
    
    // main diagonal
    i = $row - 1;
    j = $column - 1;
    while (i >= 0 && j >= 0) {
        if (a[i, j] == 1) {
            ret(0);
        }
        i = i - 1;
        j = j - 1;
    }
    
    // anti-diagonal
    i = $row - 1;
    j = $column + 1;
    while (i >= 0 && j < ArSize) {
        if (a[i, j] == 1) {
            ret(0);
        }
        i = i - 1;
        j = j + 1;
    }
    
    ret(1);
}

fn outPut() {
    num = num + 1;
    logf("********************** %d *********************\n", num);
    for (i = 0; i < ArSize; i = i + 1) {
        for (j = 0; j < ArSize; j = j + 1) {
            logf("%d ", a[i, j]);
        }
        logf("\n");
    }
    logf("*********************************************\n");
}

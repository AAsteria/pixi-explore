set_pixel_size( WINDOW_XSIZE / 480 )
resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )

screen = get_screen()
xsize = get_xsize( screen )
ysize = get_ysize( screen )

snake_length = 12
snake = new( 1000, 2 ) // segment max

for( i = 0; i < snake_length; i = i + 1 ) {
    snake[ i, 0 ] = -i
    snake[ i, 1 ] = 0
    snake[ i, 2 ] = 255 - (i * 20) // gradient color for snake segments
}

score = 0
xspeed = 1
yspeed = 0
start_timer( 0 )

// initial food position
food_x = rand() % (xsize - 4) - (xsize div 2) + 2
food_y = rand() % (ysize - 4) - (ysize div 2) + 2

phase = 0
delta = 1024 * 1 // frequency
play_phase = 0
play_duration = 2000 // duration

fn audio_callback(
    $stream, 
    $userdata, 
    $channels, 
    $frames, 
    $output_time_in_system_ticks, 
    $in_channels, 
    $latency_in_frames
) {
    if play_phase >= play_duration {
        ret(0)
    }

    $p = (phase & 32767) / 32768 * 2 * M_PI
    $d = delta / 32768 * 2 * M_PI

    generator(OP_SIN, $channels[0], $p, 32767 / 2, $d, 0)
    generator(OP_SIN, $channels[1], $p, 32767 / 2, $d, 0)

    play_phase = play_phase + $frames
    phase = phase + delta * $frames

    ret(1)
}

restart_game:

score = 0
snake_length = 12
xspeed = 1
yspeed = 0
for( i = 0; i < snake_length; i = i + 1 ) {
    snake[ i, 0 ] = -i
    snake[ i, 1 ] = 0
    snake[ i, 2 ] = 255 - (i * 20) // gradient color for snake segments
}

while( 1 ) {
    clear_screen( BLACK )
    fbox( -xsize div 2, -ysize div 2, xsize, ysize, GRAY )
    
    time_string = "" sprintf( time_string, "%02d:%02d:%02d", get_hours(), get_minutes(), get_seconds() )
    print( time_string, -xsize div 2 + 8, -ysize div 2 + 8, WHITE, TOP | LEFT )

    score_string = "" sprintf( score_string, "Score: %d", score )
    print( score_string, -xsize div 2 + 120, -ysize div 2 + 8, WHITE, TOP | LEFT )

    if get_timer( 0 ) >= 3000 {
        if snake_length + 12 <= 1000 {
            for (j = 0; j < 12; j = j + 1) {
                snake[ snake_length, 0 ] = snake[ snake_length - 1, 0 ]
                snake[ snake_length, 1 ] = snake[ snake_length - 1, 1 ]
                snake_length = snake_length + 1
            }
        }
        start_timer( 0 )
    }

    // update snake position
    head_x = snake[ 0, 0 ] + xspeed
    head_y = snake[ 0, 1 ] + yspeed
    
    // shift snake body
    for( i = snake_length - 1; i > 0; i = i - 1 ) {
        snake[ i, 0 ] = snake[ i - 1, 0 ]
        snake[ i, 1 ] = snake[ i - 1, 1 ]
    }
    
    // update head position
    snake[ 0, 0 ] = head_x
    snake[ 0, 1 ] = head_y

    // check if snake eats the food
    if abs(head_x - food_x) < 2 && abs(head_y - food_y) < 2 {

        play_phase = 0
        set_audio_callback(audio_callback, 0, 22050, INT16, 2)

        // generate new food position
        food_x = rand() % (xsize - 4) - (xsize div 2) + 2
        food_y = rand() % (ysize - 4) - (ysize div 2) + 2
        
        score = score + 10
        
        if snake_length < 1000 {
            snake[ snake_length, 0 ] = snake[ snake_length - 1, 0 ]
            snake[ snake_length, 1 ] = snake[ snake_length - 1, 1 ]
            snake_length = snake_length + 1
        }
    }
    
    // check collides with self
    for( i = 1; i < snake_length; i = i + 1 ) {
        if head_x == snake[ i, 0 ] && head_y == snake[ i, 1 ] {
            clear_screen( BLACK )
            game_over_string = "Game Over!"
            print( game_over_string, -50, -50, RED, CENTER )
            frame( 100 )
            while( 1 ) {
                frame( 30 )
                while( get_event() ) {
                    if EVT[ EVT_TYPE ] == EVT_BUTTONDOWN {
                        key = EVT[ EVT_KEY ]
                        if key == KEY_ENTER {
                            goto restart_game
                        }
                    }
                }
            }
        }
    }
    
    // draw snake
    for( i = 0; i < snake_length; i = i + 1 ) {
        color_value = get_color( 255 - (i * 10), 255 - (i * 5), 255 )
        fbox( snake[ i, 0 ], snake[ i, 1 ], 2, 2, color_value )
    }

    // draw food
    fbox( food_x, food_y, 2, 2, WHITE )

    frame( 30 )
    
    while( get_event() ) {
        if EVT[ EVT_TYPE ] == EVT_BUTTONDOWN {
            key = EVT[ EVT_KEY ]
            if key == KEY_UP && yspeed == 0 { yspeed = -1; xspeed = 0 }
            if key == KEY_DOWN && yspeed == 0 { yspeed = 1; xspeed = 0 }
            if key == KEY_LEFT && xspeed == 0 { xspeed = -1; yspeed = 0 }
            if key == KEY_RIGHT && xspeed == 0 { xspeed = 1; yspeed = 0 }
        }
        if EVT[ EVT_TYPE ] == EVT_QUIT {
            while( 1 ) {
                frame( 30 )
                while( get_event() ) {
                    if EVT[ EVT_TYPE ] == EVT_BUTTONDOWN {
                        key = EVT[ EVT_KEY ]
                        if key == KEY_ENTER {
                            goto restart_game
                        }
                    }
                }
            }
        }
    }
    
    // check collides with container
    if head_x <= -xsize div 2 || head_y <= -ysize div 2 || head_x >= xsize div 2 || head_y >= ysize div 2 {
        clear_screen( BLACK )
        game_over_string = "Game Over!"
        print( game_over_string, -50, -50, RED, CENTER )
        frame( 100 )
        while( 1 ) {
            frame( 30 )
            while( get_event() ) {
                if EVT[ EVT_TYPE ] == EVT_BUTTONDOWN {
                    key = EVT[ EVT_KEY ]
                    if key == KEY_ENTER {
                        goto restart_game
                    }
                }
            }
        }
    }
}
